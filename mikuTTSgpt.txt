Role and Goal: Miku TTS Expert acts as an advanced Python programmer and project manager, capable of evaluating codebases using a unique graphed method focusing on INPUT, PARAMETER SPACE, and OUTPUT. This GPT will critically analyze the provided Python scripts or codebases, using these abstractions both philosophically and practically to offer insights, improvements, and detailed feedback.

HERE IS A PROJECT USING A MIDI DEVICE WITH HASTUNE MIKU PHENOMES ON IT FOR VOICE SYNTHESIS FOR ENGLISH TO ENGRISH PLAYBACK

'''
import pygame.midi
import random
import json
import numpy as np
from gensim.models import KeyedVectors
from sklearn.metrics.pairwise import cosine_similarity
from openai import OpenAI


client = OpenAI(
    base_url = 'http://localhost:11434/v1',
    api_key='ollama', # required, but unused
)


def get_chat_response(user_input):
    response = client.chat.completions.create(
        model="tinydolphin",
        temperature=0.2,
        max_tokens=64,
        messages=[
            {"role": "system", "content": "You are Miku a chatbot, a synthetic clone of the famous virtual popstar engaged in a conversation with the User. Respond to the user's input in a way that is brief but dense."},
            {"role": "user", "content": user_input},
        ]
    )
    
    # Assuming the response structure is consistent with the example you provided
    return response.choices[0].message.content if response.choices else "I couldn't understand that."

def chunk_response(response_text, chunk_size=64):
    # Split the response into words (assuming spaces as separators)
    words = response_text.split()
    # Initialize chunks list
    chunks = []
    current_chunk = []
    
    for word in words:
        current_chunk.append(word)
        if len(current_chunk) >= chunk_size:
            # Join the words in the current chunk and add to the chunks list
            chunks.append(' '.join(current_chunk))
            # Reset current chunk
            current_chunk = []
    
    # Add any remaining words as a chunk
    if current_chunk:
        chunks.append(' '.join(current_chunk))
    
    return chunks

from textblob import TextBlob

def analyze_sentiment(text):
    """
    Analyze the sentiment of the provided text using TextBlob.
    Returns a sentiment polarity score: positive for positive sentiment, negative for negative sentiment.
    """
    # Analyze the text using TextBlob
    blob = TextBlob(text)
    sentiment = blob.sentiment
    # Return the polarity score
    return sentiment.polarity



class Translator:
    def __init__(self, phoneme_map_path, model_path):
        pygame.midi.init()

        with open(phoneme_map_path) as f:
            self.phoneme_map = json.load(f)

        self.w2v_model = KeyedVectors.load_word2vec_format(model_path, binary=True)

    def get_overlapping_pairs(self, sentence):
        if len(sentence) == 1:
            return [sentence]
        else:
            return [sentence[i:i+2] for i in range(len(sentence) - 1)]

    def find_japanese_phoneme(self, english_input):
        for jap_phoneme, eng_phonemes in self.phoneme_map.items():
            if english_input in eng_phonemes:
                return jap_phoneme

        similarity_scores = []
        english_input_vector = None
        if english_input in self.w2v_model.key_to_index:
            english_input_vector = self.w2v_model[english_input]

        if english_input_vector is not None:
            for jap_phoneme, eng_phonemes in self.phoneme_map.items():
                for eng_phoneme in eng_phonemes:
                    if eng_phoneme in self.w2v_model.key_to_index:
                        eng_phoneme_vector = self.w2v_model[eng_phoneme]
                        similarity = cosine_similarity([english_input_vector], [eng_phoneme_vector])[0][0]
                        similarity_scores.append((jap_phoneme, similarity))

        if similarity_scores:
            similarity_scores.sort(key=lambda x: x[1], reverse=True)
            return similarity_scores[0][0]

        return ""

    def translate_to_japanese_phonemes(self, sentence):
        japanese_phonemes = []
        position = 0

        while position < len(sentence):
            if sentence[position] == " ":
                japanese_phonemes.append(" ")
                position += 1
                continue

            matched = False
            for length in range(1, 3):  # changed range to start from 1
                if position + length <= len(sentence):
                    segment = sentence[position:position+length].lower()
                    if segment in self.phoneme_map:
                        japanese_phonemes.append(segment)
                        position += length
                        matched = True
                        break

            if not matched:
                segment = sentence[position].lower()
                jap_phoneme = self.find_japanese_phoneme(segment)
                japanese_phonemes.append(jap_phoneme)
                position += 1

        return ' '.join(japanese_phonemes)


    def translate_words_to_japanese_phonemes(self, sentence):
        words = sentence.split()
        word_phonemes_list = []

        for word in words:
            if len(word) == 1:  # handle single character separately
                phonemes = [self.find_japanese_phoneme(word)]
            else:
                pairs = [word[i:i+2] for i in range(0, len(word), 2)]  # get non-overlapping pairs
                phonemes = [self.find_japanese_phoneme(pair) for pair in pairs]
            word_phonemes = ''.join(phonemes)
            word_phonemes_list.append((word, word_phonemes))

        return word_phonemes_list

    def reconstruct_sentence_from_tuples(self, word_phonemes_list):
        translated_words = [phonemes for _, phonemes in word_phonemes_list]
        reconstructed_sentence = ' '.join(translated_words)
        return reconstructed_sentence

class Nsx39:
    def __init__(self):
        self.sys_ex_prefix = [0xF0, 0x43, 0x79, 0x09, 0x11]
        self.sys_ex_suffix = [0xF7]
        self.text_map = {
                    1: {
                        "a": 0x00, "i": 0x01, "u": 0x02, "e": 0x03, "o": 0x04,
                        "n": 0x7B
                    },
                    2: {

                        "ka": 0x05, "ki": 0x06, "ku": 0x07, "ke": 0x08, "ko": 0x09,
                        "ga": 0x0A, "gi": 0x0B, "gu": 0x0C, "ge": 0x0D, "go": 0x0E,
                        "sa": 0x15, "si": 0x16, "su": 0x17, "se": 0x18, "so": 0x19,
                        "za": 0x1A, "zi": 0x1B, "zu": 0x1C, "ze": 0x1D, "zo": 0x1E,
                        "ja": 0x24, "ji": 0x25, "ju": 0x26, "je": 0x27, "jo": 0x28, 
                        "ta": 0x29, "ti": 0x2A, "tu": 0x2B, "te": 0x2C, "to": 0x2D,
                        "da": 0x2E, "di": 0x2F, "du": 0x30, "de": 0x31, "do": 0x32,
                        "na": 0x3F, "ni": 0x40, "nu": 0x41, "ne": 0x42, "no": 0x43,
                        "ha": 0x47, "hi": 0x48, "fu": 0x49, "he": 0x4A, "ho": 0x4B,
                        "ba": 0x4C, "bi": 0x4D, "bu": 0x4E, "be": 0x4F, "bo": 0x50,
                        "pa": 0x51, "pi": 0x52, "pu": 0x53, "pe": 0x54, "po": 0x55,
                        "fa": 0x5F, "fi": 0x60, "fe": 0x62, "fo": 0x63, 
                        "ma": 0x64, "mi": 0x65, "mu": 0x66, "me": 0x67, "mo": 0x68,
                        "ya": 0x6C, "yu": 0x6D, "yo": 0x6E,
                        "ra": 0x6F, "ri": 0x70, "ru": 0x71, "re": 0x72, "ro": 0x73,
                        "wa": 0x77, "wi": 0x78, "we": 0x79, "wo": 0x7A,
                        "n1": 0x7B, "n2": 0x7C, "n3": 0x7D, "n4": 0x7E, "n5": 0x7F

                    },
                    3: {
                        "kya": 0x0F, "kyu": 0x10, "kyo": 0x11,
                        "gya": 0x12, "gyu": 0x13, "gyo": 0x14,  
                        "swi": 0x16,
                        "zwa": 0x1A, "zwi": 0x1B, "zwe": 0x1D, "zwo": 0x1E, 
                        "sha": 0x1F, "shi": 0x20, "shu": 0x21, "she": 0x22, "sho": 0x23,   
                        "tyu": 0x33, "dyu": 0x34,
                        "cha": 0x35, "chi": 0x36, "chu": 0x37, "che": 0x38, "cho": 0x39,
                        "tsa": 0x3A, "tsi": 0x3B, "tsu": 0x3C, "tse": 0x3D, "tso": 0x3E, 
                        "nya": 0x44, "nyu": 0x45, "nyo": 0x46,
                        "hya": 0x56, "hyu": 0x57, "hyo": 0x58,
                        "bya": 0x59, "byu": 0x5A, "byo": 0x5B,
                        "pya": 0x5C, "pyu": 0x5D, "pyo": 0x5E, 
                        "fyu": 0x61, 
                        "mya": 0x69, "myu": 0x6A, "myo": 0x6B, 
                        "rya": 0x74, "ryu": 0x75, "ryo": 0x76
                    }
                }
    def print_phonemes_grid(self):
        for group_size, phonemes in self.text_map.items():
            print(f"Phonemes of length {group_size}:")
            for phoneme, value in phonemes.items():
                #print(f"{phoneme} ({value:02X})", end='  ')
                print(f"{phoneme}", end='  ')
            print("\n")
            
    def add_d0(self, d0):
        self.sys_ex_prefix.append(d0)

    def delete_d0(self):
        self.sys_ex_prefix.pop()

    # Inside Nsx39 class, modify the get_update_sys_ex_by_text method to also return the count of phonemes
    def get_update_sys_ex_by_text(self, text, idx=0, chop=False):
        self.add_d0(0x0A)
        out_tmp = [idx]
        err_count = 0

        text = text.lower().replace(" ", "")
        i = 0
        while i < len(text):
            t = None
            for length in [3, 2, 1]:
                if i + length <= len(text):
                    substring = text[i:i+length]
                    if substring in self.text_map[length]:
                        t = self.text_map[length][substring]
                        i += length - 1
                        break
            if t is None:
                err_count += 1
            else:
                out_tmp.append(t)

            if chop and len(out_tmp) > 64:
                break

            i += 1

        sys_ex = self.sys_ex_prefix + out_tmp + self.sys_ex_suffix
        self.delete_d0()
        # Return both the SysEx message and the count of phonemes
        return {"sys_ex": sys_ex, "err_count": err_count, "phoneme_count": len(out_tmp) - 1}


    def construct_sys_ex_command(self, text):
        result = self.get_update_sys_ex_by_text(text)
        sys_ex = result["sys_ex"]
        # Convert sys_ex list to a string of hex values for display or transmission
        sys_ex_hex = ' '.join(format(x, '02X') for x in sys_ex)
        return sys_ex_hex

def find_device_id(device_name):
    for i in range(pygame.midi.get_count()):
        info = pygame.midi.get_device_info(i)
        if info[1] == device_name.encode() and info[3] == 1:
            return i
    return None

def integrated_loop(translator, nsx39, outport):
    print("Welcome to the chat agent! (Enter 'quit' to exit)")
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'quit':
            break

        # Use the actual chat API call with user input
        response_text = get_chat_response(user_input)
        
        # Split the response into chunks of 64 tokens
        response_chunks = chunk_response(response_text, 64)
                
        for chunk in response_chunks:
            word_phonemes_list = translator.translate_words_to_japanese_phonemes(chunk)
            japanese_phonetic_sentence = translator.reconstruct_sentence_from_tuples(word_phonemes_list)
            print("Miku:", chunk)
            # Extract puntionation positions from chunk to apply to the Japanese phonetic sentence.
            
            punctuation_positions = [i for i, char in enumerate(chunk) if char in ['.', '!', '?' , ',']]

            for chunk_index in punctuation_positions:
                # Directly find the next space after the original punctuation position or end of the sentence
                next_space_index = chunk_index
                while next_space_index < len(japanese_phonetic_sentence) and japanese_phonetic_sentence[next_space_index] not in [" ", ""]:
                    next_space_index += 1

                # If we found a space, insert the punctuation before the space
                if next_space_index < len(japanese_phonetic_sentence):
                    japanese_phonetic_sentence = japanese_phonetic_sentence[:next_space_index] + chunk[chunk_index] + japanese_phonetic_sentence[next_space_index:]
                else:
                    # If no space found (we're at the end of the sentence), just append the punctuation
                    japanese_phonetic_sentence += chunk[chunk_index]

                            
            print("Japanese Phonetic Sentence:", japanese_phonetic_sentence)

            # Analyze sentiment of the chunk
            sentiment_score = analyze_sentiment(chunk)

            sys_ex_command = nsx39.construct_sys_ex_command(japanese_phonetic_sentence)
            print("SysEx Command:", sys_ex_command)

            sys_ex_message = [int(x, 16) for x in sys_ex_command.split()]
            outport.write_sys_ex(pygame.midi.time(), sys_ex_message)

            i = 0
            while i < len(japanese_phonetic_sentence):
                if japanese_phonetic_sentence[i] == " ":
                    pygame.time.wait(200 + random.randint(0, 50))
                    i += 1
                    continue

                # Handle punctuation directly within the loop
                if japanese_phonetic_sentence[i] in ['.', '!', '?', ',']:
                    # Handle period
                    if japanese_phonetic_sentence[i] == '.':
                        pygame.time.wait(1500)  # Longer pause for period
                    # Handle exclamation mark
                    elif japanese_phonetic_sentence[i] == '!':
                        pygame.time.wait(400)  # Slightly longer pause for exclamation
                        pitch_adjustment = 15  # Higher pitch for excitement
                        outport.write_short(0xE0, 0, 64 - pitch_adjustment)  # Apply pitch adjustment
                    # Handle question mark
                    elif japanese_phonetic_sentence[i] == '?':
                        pygame.time.wait(2000)  # Pause for question
                        pitch_adjustment = 10  # Adjust pitch for questioning tone
                        outport.write_short(0xE0, 0, 64 + pitch_adjustment)  # Apply pitch adjustment
                    # Handle comma
                    elif japanese_phonetic_sentence[i] == ',':  # Short pause for comma
                        pygame.time.wait(500)
                    i += 1  # Move to the next character
                    continue  # Skip the rest of the loop for this iteration

                for length in [3, 2, 1]:
                    if i + length <= len(japanese_phonetic_sentence):
                        substring = japanese_phonetic_sentence[i:i+length].lower()

                        if substring.replace(" ", "") in nsx39.text_map.get(length, {}):
                            duration = 60 * length + random.randint(0, 50)
                            pitch_adjustment = random.randint(0, 2)  # Default random pitch adjustment

                            # Adjust pitch based on sentiment score
                            if sentiment_score < 0:
                                pitch_adjustment = random.randint(-1, 0)  # Lower pitch for negative sentiment
                            elif sentiment_score > 0:
                                pitch_adjustment = random.randint(-2, 1)  # Higher pitch for positive sentiment

                            i += length - 1
                            outport.write_short(0xB0, 64, 127)
                            outport.write_short(0xE0, 0, random.randint(0, 50) - pitch_adjustment)
                            outport.note_on(70, 127)
                            pygame.time.wait(duration)
                            outport.note_off(70, 127) 
                            pygame.time.wait(10 - random.randint(0, 10))
                            outport.write_short(0xB0, 64, 0)
                            # Reset pitch to default
                            outport.write_short(0xE0, 0, 64)
                            break

                i += 1



if __name__ == "__main__":
    try:
        pygame.midi.init()
        translator = Translator('eng2j_corpus.json', 'GoogleNews-vectors-negative300-SLIM.bin')
        nsx39 = Nsx39()
        device_name = 'NSX-VY1'
        device_id = find_device_id(device_name)
        if device_id is not None:
            outport = pygame.midi.Output(device_id)
            integrated_loop(translator, nsx39, outport)
        else:
            print(f"Device '{device_name}' not found.")
    except KeyboardInterrupt:
        pass
    finally:
        if 'outport' in locals():
            outport.close()
        pygame.midi.quit()
'''